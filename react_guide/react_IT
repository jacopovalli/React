#React

[https://react.dev/learn/react-developer-tools]
___________________________________

1. Creare cartella

2. Accedere ad essa

3. Aprire Editor (VSC, nel mio caso)

4. Aprire un terminale, che andrà lasciato aperto, e dare il comando **npx create-react-app nome_progetto_react** e seguire le istruzioni

5. **Accedere da terminale alla cartella del progetto** inclusa nella cartella creata precedentemente

6. **npm i**

7. Aprire un temrinale, che lasceremo aperto, e accertarsi di essere nella cartella del progetto React al quale stiamo lavorando e lanciare il comando:

 **npm run start** ***o*** **npm start**

8. Andare in src e aprire il file **App.js** ed effettuare una modifica, che si vedrà nel browser alla finestra aperta precedentemente lanciando il comando al punto 5.

9. Lavoreremo sempre attraverso la cartella **src** ed i files contenuti in essa.
Possiamo andare a modificare anche il file **index.html** presente in **public**, ***ma è attraverso il file con lo stesso nome – index.html – presente in src, che andiamo ad agire direttamente su ciò che poi vediamo nel browser attraverso il file presente in public*** (public è relativa a ciò che vediamo lato client, come in Laravel)

10. Installare l'estensione VSC chiamata ES7+ React/Redux/React-Native snippets, di dsznajder per avere le shortcuts di React

11. creare cartella **components** in src

12. nella nuova cartella components, **creare file js** componente (per esempio, component_1.js) – **il nome dei componenti, in React, deve sempre iniziare con una lettera maiuscola!**

***Consideriamo che anche quando all'inizion abbiamo lanciato il comando npx create-react-app nome_progetto_react, abbiamo tecnicamente creato un componente, che, in quel caso, è il file App.js che troviamo in src***


13. **Apriamo** il componente appena creato, il file **Component_1.js**, e, utilizzando una dele shortcuts permesse dall'estensione scaricata prima, scriviamo:

**rafce**

***rafce è una shortcuts che creerà un metodo arrow function***

oppure, scriviamo:

**rfce**

***rfce creerà un metodo non con sinstassi arrow function***


14. in **App.js**, importare, con sintassi ES6, il componente creato sopra:

**import component_1 from './components/Component_1';**


15. **Ogni componente deve sempre ritornare qualcosa, e non può ritornare più di un elemento HTML dinamicamente creato alla volta. Quindi, se per esempio vogliamo ritornare un <h1> ed un <h2>, o li chiudiamo in un <div>, che verrà identificato come unico elemento; oppure, abbiamo due modalità:**

**a) <> contenuto elemento </>**

**b) <React.Fragment>contenuto elemento</React.Fragment>**


 **il return deve essere sempre seguito dalle parentesi tonde, che conterranno l'elemento ritornato. Se non presenti tali parentesi, il tag HTML di apertura dovrà necessariamente essere sulla stessa linea del comando return.**

 ***Questi tag HTML sono in realtà tag di tipo JSX, ovvero, JavaScript per React, e, a differenza dei tag HTML "puri" devono sempre (!) essere chiusi.***


 16. **Per annidare più subcomponents all'interno din un component primario: dichiariamo diversi subcomponenti (funzioni che ritornano subelementi) e poi, nel return del componente primario, li richiamiamo sottoforma di tag JSX**


17. Il file **index.css** che troviamo in **src** è anch'esso collegato al file **index.html** che troviamo in **public**: quindi, agiremo su quel CSS per le modifiche di stile.
